# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      #- uses: actions/setup-node@v3
      #  with:
      #    node-version: 16
      #- run: npm ci

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!
      - name: install php dependancies
        run: composer install --no-dev
      
      #- name: install node dependancies
      #  run: npm install
      
      #- name: boot
      #  run: npm run prod

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        env:
          APP_DEBUG: ${{ secrets.APP_DEBUG }}
          APP_ENV: ${{ secrets.APP_ENV }}
          APP_NAME: ${{ secrets.APP_NAME }}
          APP_URL: ${{ secrets.APP_URL }}
          CACHE_DRIVER: ${{ secrets.CACHE_DRIVER }}
          DB_CONNECTION: ${{ secrets.DB_CONNECTION }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          FILESYSTEM_DISK: ${{ secrets.FILESYSTEM_DISK }}
          LOG_CHANNEL: ${{ secrets.LOG_CHANNEL }}
          LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
          QUEUE_CONNECTION: ${{ secrets.QUEUE_CONNECTION }}
          SESSION_DRIVER: ${{ secrets.SESSION_DRIVER }}
          SESSION_LIFETIME: ${{ secrets.SESSION_LIFETIME }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ../private.key
          touch .env
          echo "APP_NAME=\"$APP_NAME\"" >> .env
          echo "APP_ENV=$APP_ENV" >> .env
          echo "APP_KEY=$(php artisan key:generate --show)" >> .env
          echo "APP_DEBUG=$APP_DEBUG" >> .env
          echo "APP_URL=$APP_URL" >> .env
          echo "DB_CONNECTION=$DB_CONNECTION" >> .env
          echo "DB_HOST=$DB_HOST" >> .env
          echo "DB_PORT=$DB_PORT" >> .env
          echo "DB_DATABASE=$DB_DATABASE" >> .env
          echo "DB_USERNAME=$DB_USERNAME" >> .env
          echo "DB_PASSWORD=$DB_PASSWORD" >> .env
          echo "CACHE_DRIVER=$CACHE_DRIVER" >> .env
          echo "FILESYSTEM_DISK=$FILESYSTEM_DISK" >> .env
          echo "LOG_CHANNEL=$LOG_CHANNEL" >> .env
          echo "LOG_LEVEL=$LOG_LEVEL" >> .env
          echo "SESSION_DRIVER=$SESSION_DRIVER" >> .env
          echo "SESSION_LIFETIME=$SESSION_LIFETIME" >> .env
          echo "QUEUE_DRIVER=$QUEUE_CONNECTION" >> .env
      - name: Setup SSH KEY
        env:
          SSH_PROD_HOST: ${{ secrets.SSH_PROD_HOST }}
          SSH_PROD_USER: ${{ secrets.SSH_PROD_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_PROD_HOST
            User $SSH_PROD_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
      - name: Create and deploy tar ball
        run: |
          touch release.tar.gz
          tar --exclude=./release.tar.gz -czf release.tar.gz .
          scp release.tar.gz staging:/home/ubuntu
          ssh staging "mv release.tar.gz backend.atticpingpong.com/ && cd backend.atticpingpong.com && sudo tar -xf release.tar.gz && rm release.tar.gz && cd .. && sudo chown -R www-data:www-data backend.atticpingpong.com/ && cd backend.atticpingpong.com && php artisan key:generate"
